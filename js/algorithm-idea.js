// just store some text for algorithmIdea
let quickSortText = "设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据 （通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。一趟快速排序的算法是：<br> 1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；<br> 2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；<br> 3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；<br>4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；<br> 5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。 找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）";
let bubbleSortText = "冒泡排序算法的运作如下：（ 从后往前)<br>1: 比较相邻的元素。 如果第一个比第二个大， 就交换他们两个。 <br>2: 对每一对相邻元素作同样的工作， 从开始第一对到结尾的最后一对。 在这一点， 最后的元素应该会是最大的数。 <br>3: 针对所有的元素重复以上的步骤， 除了最后一个。 <br>4: 持续每次对越来越少的元素重复上面的步骤， 直到没有任何一对数字需要比较";
let bubbleSortBetterText = "使用Flag的冒泡排序算法的运作如下：（ 从后往前)<br>1: 设置一个Flag为true,比较相邻的元素。 如果第一个比第二个大， 就交换他们两个。 <br>2: 当开始比较时设置Flag为false,对每一对相邻元素作同样的工作， 从开始第一对到结尾的最后一对。 如果发生顺序交换，说明数组还未有序，设置Flag为true,在这一点， 最后的元素应该会是最大的数。 <br>3: 每次循环的最后都会判断Flag的值，如果为false就结束循环比较，针对所有的元素重复以上的步骤， 除了最后一个。 <br>4: 持续每次对越来越少的元素重复上面的步骤， 直到没有任何一对数字需要比较";
